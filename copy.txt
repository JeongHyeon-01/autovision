import json
import ffmpeg

# 추후 post시 json으로 받아옴
def load_json(file_path: str):
    with open(file_path, 'r') as file:
        data = json.load(file)
    return data

import ffmpeg

def create_video_from_json(json_data):
    video_clips = []
    audio_clips = []

    # Target resolution
    target_width = 1280
    target_height = 720

    # Extract clips from tracks
    for track in json_data['timeline']['tracks']:
        for clip in track['clips']:
            if clip['asset']['type'] == 'image':
                # 이미지 클립의 경우, 일정 길이로 설정하고 해상도 변환
                input_clip = ffmpeg.input(clip['asset']['src'])
                input_clip = input_clip.filter('scale', target_width, target_height)
                input_clip = input_clip.filter('fps', fps=24, round='up')
                input_clip = input_clip.filter('format', 'yuv420p')  # 픽셀 형식 변환 추가
                
                # 필터를 사용하여 효과 적용 (예: 줌 효과)
                if clip.get('effect') == 'zoomOutSlow':
                    input_clip = input_clip.filter('zoompan', z='min(zoom+0.0015,1.5)')
                
                # 클립의 지속 시간을 명확히 설정
                input_clip = input_clip.setpts('PTS-STARTPTS')  # 타임스탬프 재설정
                video_clips.append(input_clip)
                
            elif clip['asset']['type'] == 'audio':
                # 오디오 클립은 직접 입력으로 사용
                input_audio = ffmpeg.input(clip['asset']['src'], ss=clip['start'], t=clip['length'])
                input_audio = input_audio.filter('aformat', sample_fmts='s16')  # 오디오 포맷 설정
                audio_clips.append(input_audio)

    # Combine video clips using ffmpeg
    if video_clips:
        output_file = "output_video.mp4"
        # 비디오 스트림 생성
        video_stream = ffmpeg.concat(*video_clips, v=1, a=0).node
        
        # 오디오 스트림이 있는 경우 결합
        if audio_clips:
            audio_stream = ffmpeg.concat(*audio_clips, v=0, a=1).node
            output = ffmpeg.output(video_stream[0], audio_stream[0], output_file, vcodec='libx264', acodec='aac')
        else:
            output = ffmpeg.output(video_stream[0], output_file, vcodec='libx264')

        # 실행
        output.run(overwrite_output=True)
        
        return {"status": "success", "video_url": output_file}
    else:
        return {"status": "error", "message": "No clips found to process"}


json_data = load_json('./example.json')
response = create_video_from_json(json_data)
